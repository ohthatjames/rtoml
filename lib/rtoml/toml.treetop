grammar Rtoml
  rule document
    (key_group / assignment / blank_line)+
    {
      def content
        data = {}
        key_group = []
        elements.each do |element|
          if element.respond_to?(:content) && !element.content.nil?
            key, value = element.content
            final_value = key_group.inject(data) do |hash, k|
              hash = (hash[k] ||= {})
            end
            final_value[key] = value
          elsif element.respond_to?(:key_group)
            key_group = element.key_group
          end
        end
        data
      end
    }
  end
  
  rule assignment
    S key S "=" S value S
    {
      def content
        [key.content, value.content]
      end
    }
  end
  
  rule key_group
    S "[" [^\]]+ "]" S
    {
      def key_group
        elements[2].text_value.split(".")
      end
    }
  end
  
  rule key
    [a-zA-z]+
    {
      def content
        text_value
      end
    }
  end
  
  rule value
    [0-9]+
    {
      def content
        text_value.to_i
      end
    }
  end
  
  rule S
    [\ \t]*
  end
  
  rule newline
    "\n"
  end
  
  rule blank_line
    newline / ([\ \t]+ newline)
  end
end
