require 'date'

grammar Rtoml
  rule document
    (key_group / assignment / blank_line)+
    {
      def content
        data = {}
        key_group = []
        elements.each do |element|
          if element.respond_to?(:content) && !element.content.nil?
            key, value = element.content
            final_value = key_group.inject(data) do |hash, k|
              hash = (hash[k] ||= {})
            end
            final_value[key] = value
          elsif element.respond_to?(:key_group)
            key_group = element.key_group
          end
        end
        data
      end
    }
  end
  
  rule assignment
    S key S "=" S value S comment
    {
      def content
        [key.content, value.content]
      end
    }
  end
  
  rule key_group
    S "[" [^\]]+ "]" S comment
    {
      def key_group
        elements[2].text_value.split(".")
      end
    }
  end
  
  rule key
    [a-zA-z]+
    {
      def content
        text_value
      end
    }
  end
  
  rule value
    array / string / date / float / int / boolean_true / boolean_false
  end
  
  rule array
    empty_array / single_array / multi_array
  end
  
  rule multi_array
    "[" value next_value+ "]"
    {
      def content
        [value.content] +
        elements[2].elements.inject([]) do |acc, element|
          acc << element.content unless element.text_value == ","
        end
      end
    }
  end
  
  rule next_value
    "," value
    {
      def content
        elements[1].content
      end
    }
  end
  
  rule single_array
    "[" value "]"
    {
      def content
        [elements[1].content]
      end
    }
  end
  
  rule empty_array
    "[]"
    {
      def content
        []
      end
    }
  end
  
  rule string
    '"' ('\"' / !'"' .)* '"'
    {
      def content
        elements[1].text_value.gsub('\"', '"')
      end
    }
  end
  
  rule date
    [0-9] 4..4 "-" [0-9] 2..2 "-" [0-9] 2..2 "T" [0-9] 2..2 ":" [0-9] 2..2 ":" [0-9] 2..2 "Z"
    {
      def content
        DateTime.iso8601(text_value)
      end
    }
  end
  
  rule float
    "-"? [0-9]+ "." [0.9]+
    {
      def content
        text_value.to_f
      end
    }
  end
  
  rule int
    "-"? [0-9]+
    {
      def content
        text_value.to_i
      end
    }
  end
  
  # TODO: Why can't I combine the boolean rules with "true" / "false"
  rule boolean_true
    "true"
    {
      def content
        true
      end
    }
  end
  
  rule boolean_false
    "false"
    {
      def content
        false
      end
    }
  end
  
  rule S
    [\ \t]*
  end
  
  rule newline
    "\n"
  end
  
  rule blank_line
    newline / ([\ \t]+ comment newline) 
  end
  
  rule comment
    ("#" [^\n]*)?
  end
end
